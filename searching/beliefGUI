# from tkinter.simpledialog import askstring

import ManageNode,Linking,GuiArray,Algorithms
import  math,numpy

import pickle
from tkinter import *
# import Tkinter
import tkinter.filedialog

root = Tk()
topFrame = Frame(root)
topFrame.pack(fill=X)
topFrame2 = Frame(root)
topFrame2.pack(fill=X)
bottomFrame = Frame(root)
bottomFrame.pack(side=BOTTOM)

# canvas
canvas = Canvas(root, width=1000,height=600,bg="light gray")
canvas.pack(expand=1,fill=BOTH)

#creating objects - link to the classes in the folder
GA=GuiArray.guiArray(canvas)
MN=ManageNode.manageNode()
LK=Linking.Graph()

#drop down list

# create buttons
button1 = Button(topFrame,text="Create Node")
button2 = Button(topFrame,text="Create Child Probabilities")
button3 = Button(topFrame,text="Create Link")
# button4 = Button(topFrame,text="Move Node")
# button5 = Button(topFrame,text="Delete Node")
button6 = Button(topFrame,text="Set True Probability")
button7 = Button(topFrame,text="Set False Probability")
button8 = Button(topFrame,text="Set Observation")

button1.pack(side=LEFT)
button2.pack(side=LEFT)
button3.pack(side=LEFT)
# button4.pack(side=LEFT)
# button5.pack(side=LEFT)
button6.pack(side=LEFT)
button7.pack(side=LEFT)
button8.pack(side=LEFT)

# methods called by buttons
node_id_Dic={}
prob_table_id={}
# draw on the canvas
def drawNode(e):
    #if not means if it's empty then do operation

    #canvas enclosed creates a space around where you click and checks no other objects are in that area
    #if objects are present it wont create a node there

    #if is empty then creates the oval

    if not canvas.find_enclosed(e.x-105,e.y-105,e.x+105,e.y+105):
        oval=canvas.create_oval(e.x-50,e.y-50,e.x+50,e.y+40)

        #need to factor these tables into the above

        probTable=canvas.create_rectangle(e.x-60,e.y-30,e.x-140,e.y+30)
        tableHorizLine2 = canvas.create_line(e.x-60,e.y,e.x-140,e.y)
        tableVertLine = canvas.create_line(e.x - 100, e.y - 30, e.x - 100, e.y + 30)
        falseLabel=canvas.create_text(e.x-80,e.y-15,text="F")
        trueLabel = canvas.create_text(e.x-120,e.y-15,text="T")

        #store these tables into dictionaries linking them to the node

        value = askstring('value', 'Please enter a title')

      #MN.inc means increase that method by 1 as new node was created

        nodeID=MN.inc()

        nodeName=value

        #nickname given to each node
        nickname=canvas.create_text(e.x,e.y,text=str(value))



    # set store following for below
    # node ID, node name, prob table, t and its value, f and its value

    # GUIset = [nodeName, oval, {}]  # number object / oval object / dictionary for linking

    probID=MN.inc()
    prob_table_id[probTable]=probID
    Probset = [nodeID, nodeName,probID,{}]
    node_id_Dic[oval] = nodeID
    LK.add_vertex(nodeID)
    GA.addBeliefNode(Probset, nodeID, probID)


# listen to mouse action
def CreateNode(event):
    root.config(cursor="")
    canvas.bind("<Button-1>",drawNode)

# need to change these values so it includes table
def ArcPoint2(e):
    if len(canvas.find_enclosed(e.x-105,e.y-105,e.x+105,e.y+105))==2:
        toNode=node_id_Dic[canvas.find_enclosed(e.x-105,e.y-105,e.x+105,e.y+105)[0]]#the node is created before num so it is at [0]
        if (fromNode is not toNode)and(LK.check_edge_existed(fromNode,toNode)==False):
            root.config(cursor="")
            arrow = canvas.create_line(x,y,e.x,e.y,arrow="last")#fill="turquoise" can change color

            GA.addBeliefArrow(fromNode, toNode, arrow)

            # #this method produces the connection

            LK.add_edge(fromNode,toNode)

            canvas.bind("<Button-1>",ArcPoint1)

# listen to the first click for the line
def ArcPoint1(e):
    #==2 need to change this to == length of string input +1
    if len(canvas.find_enclosed(e.x-105,e.y-105,e.x+105,e.y+105))==2:
    #global equivalent of instance variable
    #used this so its able to be used by different methods
    #x,y =location and fromNode = the id of the node you pick up - the one you draw FROM
        global x,y,fromNode
        x,y=e.x,e.y
        fromNode=node_id_Dic[canvas.find_enclosed(e.x-105,e.y-105,e.x+105,e.y+105)[0]]
        root.config(cursor="cross")
        canvas.bind("<Button-1>",ArcPoint2)
# listen to the mouse action
def CreateArc(event):
    root.config(cursor="")
    canvas.bind("<Button-1>",ArcPoint1)

def moveTo(e):
    #for both lines below so x = location of the node you want to move
    #e.x = location you want to move it to
    #subtract these to get the distance to move the node by

    #selects the location of the node you want to move
    canvas.move(moveTheNode,e.x-x,e.y-y)

    #+1 moves the number associated with that node ie 0,1,2 etc
    canvas.move(moveTheNode+1,e.x-x,e.y-y)

    # move the arrows
    for i in moveArrowTails:
        canvas.move(moveArrowTails[i],e.x-x,e.y-y)

    root.config(cursor="")
    canvas.bind("<Button-1>",moveFrom)
# select the node
def moveFrom(e):
    global x,y
    x,y=e.x,e.y
    n=canvas.find_enclosed(e.x-50,e.y-50,e.x+50,e.y+50)
    if len(n)==2:
        root.config(cursor="exchange")
        global moveTheNode, moveArrowTails, moveArrowHeads
        #[0] is the ID of the node you want to move
        moveTheNode=n[0]
        moveArrowTails=GA.nodeList[node_id_Dic[n[0]]][2]
        moveArrowHeads={}
        for i in GA.nodeList:
            if node_id_Dic[n[0]] in GA.nodeList[i][2]:
                moveArrowHeads[i]=GA.nodeList[i][2][node_id_Dic[n[0]]]

        #once you click that node, then moves to moveTo method above and moves node
        canvas.bind("<Button-1>",moveTo)
    else:
        canvas.bind("<Button-1>",moveTo)

# Move the object
def Move(event):
    root.config(cursor="")
    canvas.bind("<Button-1>",moveFrom)

def removeFromCanvas(e):
    #checks range to see if both node and number label are in the range where you clicked
    if len(canvas.find_enclosed(e.x-50,e.y-50,e.x+50,e.y+50))==2:
        #[0] is the node ID thats selected
        selectedNode=node_id_Dic[canvas.find_enclosed(e.x-50,e.y-50,e.x+50,e.y+50)[0]]
        GA.deleteNode(selectedNode)
        LK.delete_vertex(selectedNode)
        #this removes the deleted node and arrow out of the array and stores the number of that node into a priority queue
        #so takes no. from top of priority queue when creating next node
        MN.remove(selectedNode)

        # for v in LK.vert_dict:#####
        # print(str(LK.vert_dict[v].get_id())+' is connected to '+str([g for g in LK.vert_dict[v]]))
        Delete  #takes you to delete def below

# Delete the node
def Delete(event):
    root.config(cursor="spider")
    canvas.bind("<Button-1>",removeFromCanvas)

def NextStep(e):
    #produce the canvas to display the probability table here
    #remove previous canvas from screen
    #
    #
    print("iiii")

def setTrueProb(e):

    valueT = askstring('value', 'Please enter a true probability value')

    valueT = getdouble(valueT)

    valueTrueSet=["T " , valueT]

    print(valueTrueSet)

    #need to sort out error handling here if no value entered/cancelled

    #if true box is clicked enter value
    if not canvas.find_enclosed(e.x-20, e.y, e.x+20, e.y+30):
        canvas.create_text(e.x, e.y, text=valueT)


def ParentTrueProb(event):
    root.config(cursor="cross")
    canvas.bind("<Button-1>", setTrueProb)


def setFalseProb(e):
    valueF = askstring('value', 'Please enter a false probability value')

    valueF = getdouble(valueF)

    valueFalseSet = ["F " , valueF]


    print(valueFalseSet)

    # need to sort out error handling here if no value entered/cancelled

    # if false box is clicked enter value
    if not canvas.find_enclosed(e.x - 20, e.y, e.x + 20, e.y + 30):
        canvas.create_text(e.x, e.y, text=valueF)


def ParentFalseProb(event):
    root.config(cursor="cross")
    canvas.bind("<Button-1>", setFalseProb)


def setTF(e):

    #alternatively do a drop down list of all the nodes from the dictionary
    #instead of an entry box


        Label(root, text="Select Node:").pack(side=LEFT)

        e1 = Entry(root)

        e1.pack(side=LEFT)

        chosenNode = e1.get()

        print("aaaaaa")
        print(chosenNode) #not printing????
        print("bbbb")


        global truevar

        truevar = IntVar()

        true = Checkbutton(root, text="True", variable=truevar)
        true.pack(side=LEFT)

        falsevar=IntVar()
        false = Checkbutton(root, text="False", variable=falsevar)
        false.pack(side=LEFT)
        falsevar.get()
        # print(falsevar.get())


        print("eeeee")
        truevar.get()

        print(truevar.get())


        # need to check if its selected

    # if truevar.get() == 0:
        #      print("T")
        #
        # else:
        #     print("F")

        print("ccccc")

def SetObs(event):
    root.config(cursor="cross")
    canvas.bind("<Button-1>", setTF)

def childProbs(e):

    #make this call the algorithm
    print("")

def childP(event):
    root.config(cursor="")
    canvas.bind("<Button-1>",childProbs)

button1.bind("<Button-1>",CreateNode)
button2.bind("<Button-1>",childP)
button3.bind("<Button-1>",CreateArc)
# button3.bind("<Button-1>",Move)
# button5.bind("<Button-1>",Delete)
button6.bind("<Button-1>",ParentTrueProb)
button7.bind("<Button-1>",ParentFalseProb)
button8.bind("<Button-1>", SetObs)


root.mainloop()
